<?php
/**
 * @package     Windwalker.Framework
 * @subpackage  AKHelper
 *
 * @copyright   Copyright (C) 2012 Asikart. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE.txt
 * @author      Generated by AKHelper - http://asikart.com
 */


// No direct access
defined('_JEXEC') or die;

/**
 * Handle some component system information.
 *
 * @package     Windwalker.Framework
 * @subpackage  AKHelper
 */
class AKHelperSystem
{
    /**
     * A cache to store component system config (Not Joomla! component params).
     *
     * @var array 
     */
    static $config        = array();
    
    /**
     * Version of component.
     *
     * @var array 
     */
    static $version        = array();
    
    /**
     * Profiler store.
     *
     * @var array 
     */
    static $profiler    = array() ;
    
     /**
     * Get component Joomla! params, a proxy of JComponentHelper::getParams($option) ;
     * 
     * @param   string    $option Component option name.
     *
     * @return  JRegistry    Component params object.
     */
    public static function getParams($option = null)
    {
        if(!$option) {
            $option = AKHelper::_('path.getOption') ;
        }
        
        if($option) {
            return JComponentHelper::getParams($option);
        }
    }
    
    /**
     * Get component system config, if first param not exists, will return all params object.
     * 
     * @param   string    $key        Param key.
     * @param   string    $default    Default value if key not exists.
     * @param   string    $option     Component option name.
     *
     * @return  mixed    Param value.    
     */
    public static function getConfig($key = null, $default = null, $option = null)
    {
        if(!$option){
            $option = AKHelper::_('path.getOption') ;
        }
        
        // Singleton & Lazy loading
        if(isset(self::$config[$option])) {
            if(!$key){
                return self::$config[$option] ;
            }else{
                return self::$config[$option]->get($key, $default) ;
            }
        }
        
        // Init Config
        self::$config[$option] = new JRegistry();
        self::$config[$option]->loadFile( AKHelper::_('path.getAdmin', $option).'/includes/config.json' );
        
        if(!$key){
            return self::$config[$option] ;
        }else{
            return self::$config[$option]->get($key, $default) ;
        }
    }
    
    /**
     * Save component params to #__extension.
     * 
     * @param   mixed    $params        A params object, array or JRegistry object.
     * @param   string    $element    Extension element name, eg: com_content, mod_modules.
     * @param   string    $client        Client, 1 => 'site', 2 => 'administrator'.
     * @param   string    $group        Group(folder) name for plugin.
     *
     * @return  boolean    Success or not.
     */
    public static function saveParams($params, $element, $client = null, $group = null)
    {
        if( $params instanceof JRegistry ) {
            $params = (string) $params ;
        }else{
            $params = json_decode($params) ;
        }
        
        $client = ($client == 'admin' || $client == 1) ? 1 : 0 ;
        
        $db = JFactory::getDbo();
        $q = $db->getQuery(true) ;
        
        if( $client ) {
            $q->where("client_id = '{$client}'") ;
        }
        
        if( $group ) {
            $q->where("folder = '{$group}'");
        }
        
        $q->update( '#__extensions' )
            ->set("params = '{$params}'")
            ->where("element = '{$element}'")
            ;
        
        $db->setQuery($q);
        return $db->execute();
    }
    
    /**
     * Save component config to "config.json" in includes dir.
     * 
     * @param   mixed    $params        A config object, array or JRegistry object.
     * @param   string    $option     Component option name.
     *
     * @return  boolean    Success or not.    
     */
    public static function saveConfig($params, $option = null)
    {
        if( $params instanceof JRegistry ) {
            $params = (string) $params ;
        }else{
            $params = json_decode($params) ;
        }
        
        $path = AKHelper::_('path.getAdmin', $option) . '/includes/config.json' ;
        return JFile::write($path, $params) ;
    }
    
    /**
     * Get component version form manifest XML file.
     * 
     * @param   string    $option    Component option name.
     *
     * @return  string    Component version.
     */
    public static function getVersion($option = null)
    {
        if(!$option){
            $option = AKHelper::_('path.getOption') ;
        }
        
        if(isset(self::$version[$option])) {
            return self::$version[$option] ;
        }
        
        $xml = AKHelper::_('path.getAdmin').'/'.substr(AKHelper::_('path.getOption'), 4).'.xml' ;
        $xml = JFactory::getXML($xml, true) ;
        
        return self::$version[$option] = $xml->version ;
    }
    
    /**
     * A helper to add JProfiler log mark. Need to trun on the debug mode.
     * 
     * @param   string    $text        Log text.
     * @param   string    $namespace    The JProfiler instance ID. Default is the core profiler "Application". 
     */
    public static function mark($text, $namespace = null)
    {
        
        if(!$namespace) {
            $namespace = 'Application' ;
        }
        
        if( !(JDEBUG && $namespace == 'Application') && !AKDEBUG) {
            return ;
        }
        
        if(isset(self::$profiler[$namespace])) {
            self::$profiler[$namespace]->mark($text) ;
        }
        
        // System profiler.
        jimport('joomla.error.profiler');
        self::$profiler[$namespace] = JProfiler::getInstance($namespace);
        
        self::$profiler[$namespace]->mark($text) ;
    }
    
    /**
     * Render the profiler log data, and echo it..
     * 
     * @param   string    $namespace    The JProfiler instance ID. Default is the core profiler "Application".  
     */
    public static function renderProfiler($namespace = null)
    {
        if(!$namespace) {
            $namespace = 'Application' ;
        }
        
        if(isset(self::$profiler[$namespace])) {
            $_PROFILER = self::$profiler[$namespace] ;
            
            $buffer = $_PROFILER->getBuffer();
            $buffer = implode("\n<br />\n", $buffer) ;
            
        }else{
            $buffer = 'No Profiler Data.' ;
        }
        
        $buffer = '<pre><h3>WindWalker Debug: </h3>'.$buffer.'</pre>' ;
        
        echo $buffer ;
    }
}